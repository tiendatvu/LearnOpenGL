#version 330 core
out vec4 FragColor;

struct Material {
    sampler2D diffuse;
    sampler2D specular;    
    sampler2D emission;
    float shininess;
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  
uniform vec3 viewPos;
uniform Material material;
uniform Light light;
uniform float Time;

void main()
{
    // ambient
    vec3 ambient = light.ambient * texture(material.diffuse, TexCoords).rgb;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;
    
    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * texture(material.specular, TexCoords).rgb;  
    
    // emission
    // solution 1: simply just load the emission map for the cube
    //vec3 emission = texture(material.emission, TexCoords + vec2(Time / 2.0f, Time)).rgb;
    // solution 2: Try to just load the emssion inside of the border
    vec3 emission = vec3(0.0);
    // with the specular map of the texture, we set the wood inside of the steel border is total black (with the value 0)
    // -> check for the pixel of the texture having r/g/b = 0
    // -> set the emission map value
    if(texture(material.specular, TexCoords).r == 0.0)
    {
        // apply the emssion map into the texture
        emission = texture(material.emission, TexCoords).rgb;

        // apply moving effect
        emission = texture(material.emission, TexCoords + vec2(0.0, Time)).rgb;
        emission = emission * sin(Time * 5);
    }
        
    vec3 result = ambient + diffuse + specular + emission;
    FragColor = vec4(result, 1.0);
} 